# Load libraries
import pandas
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from pandas import read_csv
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
#aqdata = laqdata.csv;
names = ['Month', 'Day', 'Hour', 'Temp', 'WD', 'WS', 'Value', 'Status']
dataset = pandas.read_csv('/Users/joelsaarinen/Downloads/newvarsdatasummerfinal.csv', names=names)
print(dataset.describe())
print(dataset.groupby('Status').size())
dataset.hist()
pyplot.show()
scatter_matrix(dataset)
pyplot.show()
dataset.plot(kind='box', subplots=True, layout=(3,3), sharex=False, sharey=False)
pyplot.show()
#Split-out validation dataset
array = dataset.values
X = array[:, 0:7]
Y = array[:, 7]
validation_size = 0.20
X_train, X_validation = model_selection.train_test_split(X, test_size=validation_size, random_state=1)
Y_train, Y_validation = model_selection.train_test_split(Y, test_size=validation_size, random_state=1)
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []
for name, model in models:
	kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
	cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
	results.append(cv_results)
	names.append(name)
	print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))
# Test options and evaluation metric

#svm = SVC(gamma='auto')
#svm.fit(X_train, Y_train)
#predictions = svm.predict(X_validation)
#print(accuracy_score(Y_validation, predictions))
#print(confusion_matrix(Y_validation, predictions))
#print(classification_report(Y_validation, predictions))
#sample = [[6, 21, 0, 63, 194, 5], [7, 14, 8, 74, 222, 2]]
#print("Sample prediction: ")
#print(svm.predict(sample))
#5, 28
